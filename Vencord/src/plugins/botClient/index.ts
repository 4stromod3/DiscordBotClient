/*
 * Vencord, a modification for Discord's desktop app
 * Copyright (c) 2022 Vendicated and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import {
    ApplicationCommandInputType,
    ApplicationCommandOptionType,
    findOption,
    OptionalMessageOption,
    RequiredMessageOption,
    sendBotMessage,
} from "@api/Commands";
import { definePluginSettings } from "@api/Settings";
import { Logger } from "@utils/Logger";
import { Devs } from "@utils/constants";
import { getCurrentChannel, getCurrentGuild } from "@utils/discord";
import definePlugin, { OptionType } from "@utils/types";
import { findByPropsLazy, findByProps } from "@webpack";
import {
    RestAPI,
    UserStore,
    ChannelStore,
    GuildMemberStore,
    SelectedGuildStore,
    SelectedChannelStore,
    PresenceStore,
    PermissionStore,
    PermissionsBits,
    FluxDispatcher,
} from "@webpack/common";

const EPOCH = 1_420_070_400_000;
let INCREMENT = BigInt(0);

const GetToken = findByPropsLazy("getToken");
const LoginToken = findByPropsLazy("loginToken");
const murmurhash = findByPropsLazy("v3");
const getAPIBaseURL = findByPropsLazy('getAPIBaseURL');

const BotClientLogger = new Logger('BotClient', '#ff88f3');

// PermissionStore.computePermissions is not the same function and doesn't work here
const PermissionUtil = findByPropsLazy(
    "computePermissions",
    "canEveryoneRole"
) as {
    computePermissions({ ...args }): bigint;
};

class SnowflakeUtil extends null {
    static generate(timestamp: Date | number = Date.now()) {
        if (timestamp instanceof Date) timestamp = timestamp.getTime();
        if (typeof timestamp !== "number" || isNaN(timestamp)) {
            throw new TypeError(
                `"timestamp" argument must be a number (received ${isNaN(timestamp) ? "NaN" : typeof timestamp
                })`
            );
        }
        if (INCREMENT >= 4095n) INCREMENT = BigInt(0);

        // Assign WorkerId as 1 and ProcessId as 0:
        return (
            (BigInt(timestamp - EPOCH) << 22n) |
            (1n << 17n) |
            INCREMENT++
        ).toString();
    }

    static deconstruct(snowflake) {
        const bigIntSnowflake = BigInt(snowflake);
        return {
            timestamp: Number(bigIntSnowflake >> 22n) + EPOCH,
            get date() {
                return new Date(this.timestamp);
            },
            workerId: Number((bigIntSnowflake >> 17n) & 0b11111n),
            processId: Number((bigIntSnowflake >> 12n) & 0b11111n),
            increment: Number(bigIntSnowflake & 0b111111111111n),
            binary: bigIntSnowflake.toString(2).padStart(64, "0"),
        };
    }

    static timestampFrom(snowflake) {
        return Number(BigInt(snowflake) >> 22n) + EPOCH;
    }

    static get EPOCH() {
        return EPOCH;
    }
}

export default definePlugin({
    name: "BotClient",
    description:
        "Patch the current version of Discord to allow the use of bot accounts",
    authors: [Devs.Ely],
    enabledByDefault: true,
    dependencies: ["CommandsAPI"],
    settings: definePluginSettings({
        showMemberList: {
            description: "Allow fetching member list sidebar",
            type: OptionType.BOOLEAN,
            default: true,
            restartNeeded: false,
        },
        memberListInterval: {
            description:
                "The amount of time the member list sidebar is refreshed (seconds)\nDon't set the time too low if you don't want your client to lag",
            type: OptionType.NUMBER,
            default: 5,
            restartNeeded: false,
        },
    }),
    patches: [
        {
            find: `{type:"LOGOUT"}`,
            replacement: [
                {
                    // If user account is already logged in, proceed to log out
                    match: /if\(\w+\.user\.bot\){/,
                    replace: "$&}else{",
                },
            ],
        },
        {
            // Bot account caused the error
            find: "hasFetchedCredentials(){",
            replacement: [
                {
                    match: /hasFetchedCredentials\(\){/,
                    replace: "$&return true;",
                },
                {
                    match: /getCredentials\(\){return/,
                    replace: "$& [];",
                },
            ],
        },
        {
            // Remove/Patch unused bot ws opcode
            find: "voiceServerPing(){",
            replacement: [
                {
                    match: /embeddedActivityClose\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /updateGuildSubscriptions\((\w+)\){/,
                    replace: function (str, ...args) {
                        const data = args[0];
                        return str + `const threadId = Object.values(${data})?.[0]?.thread_member_lists?.[0];
if (threadId) {
    getThreadMembers(threadId).then(r => {
        if (!r.length) return;
        let i = {
            threadId,
            guildId: Object.keys(${data})?.[0],
            members: r.map(_ => ({
                ..._,
                presence: null,
            })),
            type: "THREAD_MEMBER_LIST_UPDATE",
        };
        Vencord.Webpack.Common.FluxDispatcher.dispatch(i);
    });
}
return;
                        `;
                    },
                },
                {
                    match: /callConnect\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /lobbyConnect\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /lobbyDisconnect\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /lobbyVoiceStatesUpdate\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /streamCreate\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /streamWatch\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /streamPing\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /streamDelete\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /streamSetPaused\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    match: /remoteCommand\(((\w+,?)+)?\){/,
                    replace: "$& return;",
                },
                {
                    // Leave / Switch VoiceChannel
                    match: /voiceStateUpdate\((\w+)\){/,
                    replace: (str, ...args) => {
                        const data = args[0];
                        return (
                            str +
                            `
if (${data}.guildId) {
  if (${data}.guildId !== lasestGuildIdVoiceConnect) {
    // Disconnect
    this.send(4, {
        guild_id: lasestGuildIdVoiceConnect,
        channel_id: null,
        self_mute: ${data}.selfMute,
        self_deaf: ${data}.selfDeaf,
    });
    // Switch Guild
    lasestGuildIdVoiceConnect = ${data}.guildId;
  }
} else {
  ${data}.guildId = (lasestGuildIdVoiceConnect === 0) ? null : lasestGuildIdVoiceConnect;
  lasestGuildIdVoiceConnect = 0;
}`
                        );
                    },
                },
            ],
        },
        {
            // Patch opcode 2 (identify) and events
            find: "window.GLOBAL_ENV.GATEWAY_ENDPOINT;",
            replacement: [
                {
                    // Patch Close code
                    match: /(_handleClose\()(\w+)(,)(\w+)(,)(\w+)(\){)/,
                    replace: function (str, ...args) {
                        let closeCode = args[3];
                        return (
                            str +
                            `
if (${closeCode} === 4013) {
    showToast("Invalid intents, Logout...", 2);
    ${closeCode} = 4004;
} else if (${closeCode} === 4014) {
    showToast("MESSAGE_CONTENT is required, Logout...", 2);
    ${closeCode} = 4004;
}`
                        );
                    },
                },
                // Event
                {
                    match: /(_handleDispatch\()(\w+)(,)(\w+)(,)(\w+)(\){)/,
                    replace: function (str, ...args) {
                        let data = args[1];
                        let eventName = args[3];
                        let N = args[5];
                        return (
                            str +
                            `
if ("MESSAGE_CREATE" === ${eventName} && !${data}.guild_id && !Vencord.Webpack.findByProps("getChannel", "getBasicChannel")?.getChannel(${data}.channel_id)) {
    return fetchChannel(${data}.channel_id).then(i => this.dispatcher.receiveDispatch(i, "CHANNEL_CREATE", ${N})).catch((err) => {
        const i = {
            type: 1,
            recipients: [${data}.author ?? ${data}.user ?? {
                id: ${data}.user_id
            }],
            last_message_id: ${data}.id,
            is_spam: !1,
            id: ${data}.channel_id,
            flags: 0
        };
        this.dispatcher.receiveDispatch(i, "CHANNEL_CREATE", ${N});
    }).finally(() => this.dispatcher.receiveDispatch(${data}, ${eventName}, ${N}));
}
if ("READY" === ${eventName}) {
${data}.users = [
	...(${data}.users || []),
	electron.getOwner(),
];
${data}.user_settings_proto = electron.getSettingProto1(${data}.user.id),
${data}.user_guild_settings = {
	entries: [],
	version: 0,
	partial: !1,
};
(${data}.user.premium = !0),
(${data}.user.premium_type = 1),
(${data}.user.mfa_enabled = 1),
(${data}.user.phone = '+1234567890'),
(${data}.user.verified = !0),
(${data}.user.nsfw_allowed = !0),
(${data}.user.email = 'DiscordBotClient@aiko.com');
${data}.tutorial = null;
${data}.sessions = [];
${data}.relationships = [];
${data}.read_state = {
	version: 1196697,
	partial: false,
	entries: [],
};
${data}.private_channels = electron.getPrivateChannelLogin();
${data}.guild_join_requests = [];
${data}.guild_experiments = ${data}.guild_experiments || [[3363020987,null,1,[[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[1405831955,"2021-06_guild_role_subscriptions",0,[[[[-1,[{"s":7200,"e":10000}]],[1,[{"s":0,"e":4750},{"s":4750,"e":5200},{"s":5200,"e":5700},{"s":5700,"e":6200},{"s":6200,"e":7200}]]],[[2294888943,[[2690752156,1405831955],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_ROLE_SUBSCRIPTIONS"]]]]]]]],null,null,0],[2653930115,null,0,[[[[2,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[2780791286,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["281683040739262465","816784679717044276","814669604840013874","834876967656489020","21154681615024128","822219052402606132","877393448309772319","981258149317185616","958076720819372044","876918412369088582","760598239606341673","520070086158057513","910971430122971247","997637077099364383","816074230474735666","852642429105995786","1016836116273430539"],"b":1}],[],null,null,0],[2009396848,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED","VERIFIED"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["733525406203773049"],"b":1}],[],null,null,0],[3579083301,"2021-07_threads_only_channel",8,[[[[1,[{"s":0,"e":8000},{"s":8000,"e":9000},{"s":9000,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2294888943,[[2690752156,3579083301],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY","THREADS_ONLY_CHANNEL"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["BOT_DEVELOPER_EARLY_ACCESS"]]]],[2918402255,[[3399957344,1],[1238858341,26]]]]]]],null,null,0],[59132052,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["808870572401754153"],"b":1}],[],null,null,0],[3607703918,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[4030301365,"2022-01_hubs_engagement_experiments",1,[[[[-1,[{"s":6666,"e":9999},{"s":9999,"e":10000}]],[1,[{"s":3333,"e":6666}]]],[]]],[{"k":["882680660588904448","882703776794959873","859533785225494528","859533828754505741"],"b":1}],[],null,null,0],[1643537656,"activities_beb_wtp_experiments",3,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[436093779,"2021-11_guild_communication_disabled_guilds",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,436093779],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_COMMUNICATION_DISABLED_GUILDS","PARTNERED"]]]]]]]],null,null,0],[1107510295,"2022-01_hubs_engagement_experiments",0,[[[[-1,[{"s":0,"e":3333},{"s":3333,"e":6666},{"s":6666,"e":9999},{"s":9999,"e":10000}]]],[[4148745523,[[4148745523,[2]]]]]]],[{"k":["882680660588904448"],"b":1}],[],null,null,0],[1926000171,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["21154681615024128"],"b":0},{"k":["842461512206516224","882680660588904448"],"b":1}],[],null,null,0],[4089758233,"2021-11_member_verification_manual_approval",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["MEMBER_VERIFICATION_MANUAL_APPROVAL"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["991365865532575844","809846768074227723","809844301353320558","840296607785287763","651597514407018516"]]]]]]]],null,null,0],[805952089,"2021-11_member_verification_manual_approval",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["MEMBER_VERIFICATION_MANUAL_APPROVAL"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]]]],null,null,0],[2433109164,null,12,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["710677407257854033"],"b":1}],[],null,null,0],[2201448248,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["908114392263049277","852602631297171507","966419039977111582","839303183536750622"],"b":1}],[],null,null,0],[4200595067,"2022-01_guild_role_subscription_trials",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,770139301],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_ROLE_SUBSCRIPTION_TRIALS"]]]]]]]],null,null,0],[3832113202,null,4,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["814669604840013874"],"b":0},{"k":["662267976984297473"],"b":2}],[],null,null,0],[2445595452,null,1,[[[[2,[{"s":0,"e":10000}]]],[]]],[{"k":["834846951068532756","880225006615932928","880225048194072576","880225097162588241","872631710032990268","815369174096412692"],"b":1}],[],null,null,0],[1412337990,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["799349358776549378","763838479293349899"],"b":1}],[],null,null,0],[3811644885,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[3674963204,null,2,[[[[1,[{"s":0,"e":100},{"s":100,"e":200},{"s":200,"e":300},{"s":300,"e":400},{"s":400,"e":600},{"s":600,"e":800},{"s":800,"e":1200},{"s":1200,"e":1600},{"s":1600,"e":4000},{"s":4000,"e":6500},{"s":6500,"e":10000}]]],[[1604612045,[[1183251248,["DISCOVERABLE"]]]]]]],[{"k":["951951155175489606","937840859544682529","953754308971733103","522477306787397642","803241158054510612","647509637821628422","712111817333407824","710659351576182915","302094807046684672","958150409208365146","290843998296342529","595999872222756885","417739215355510784","378662079361449994","877239953174691910","1009955672546345021","1011361906616979496","994727054190854314"],"b":1}],[],null,null,0],[3510816342,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["908114392263049277","786729496572985354","694472115428261888","488444879836413975","271486833223794694","262030232683413504","852602631297171507","346465284477026309","825852143478636554","736744916012630046","930534056200929290","976593171834351728"],"b":1}],[],null,null,0],[754016061,null,3,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["BOT_DEVELOPER_EARLY_ACCESS"]]]],[2918402255,[[3399957344,1],[1238858341,26]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,1],[1238858341,200]]]]],[[[1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,200],[1238858341,null]]]]]],[{"k":["814196235741167637"],"b":1}],[],null,null,0],[1574506570,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["281683040739262465","814196235741167637","822219052402606132","21154681615024128","834846951068532756","847184799365857331","862757171887603722"],"b":1}],[],null,null,0],[1990672009,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["908114392263049277"],"b":1}],[],null,null,0],[4190408036,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[1737811563,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["908114392263049277","747490489384829059","976593171834351728","979437427456364574","212635560596996097","211228845771063296","825852143478636554","930534056200929290","756644176610721842","424012709219008522","443584877829554177","262030232683413504","200837505145110528","739299507795132486","703067018416619522"],"b":1}],[],null,null,0],[4019729001,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["DISCOVERABLE"]]]]]]],[{"k":["953754308971733103"],"b":1}],[],null,null,0],[3282315774,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2918402255,[[3399957344,200],[1238858341,null]]]]]],[{"k":["132251458665054209"],"b":2}],[],null,null,0],[258580919,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540"],"b":1}],[],null,null,0],[1199974293,"2021-12_app_directory",3,[[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[179711638,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["908114392263049277","443584877829554177","223070469148901376","224565836277481473","488444879836413975","756644176610721842"],"b":6}],[],null,null,0],[3683063649,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["763838479293349899","651597514407018516","897162092652683314","270301680212508673","403312145938382849","816784679717044276","991365865532575844"],"b":1}],[],null,null,0],[1055563741,null,0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,1055563741],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[944104242,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["VOICE_IN_THREADS"]]]]]]],[],[],null,null,0],[2105552695,"2022-08_activities_prerelease_overrides",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["ACTIVITIES_INTERNAL_DEV"]]]]]]],[[[[2,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["ACTIVITIES_EMPLOYEE"]]]]]]],[[[[3,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["ACTIVITIES_ALPHA"]]]]]]]],null,null,0],[43837900,null,1,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["920408119123771422","930898702359482378","290926798626357250"],"b":1}],[],null,null,0],[75345024,"2022-10_communities_multi",2,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_ONBOARDING_ADMIN_ONLY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2918402255,[[3399957344,5000],[1238858341,null]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2918402255,[[3399957344,0],[1238858341,5000]]]]],[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[3723449866,null,0,[[[[1,[{"s":0,"e":1000},{"s":1000,"e":2000},{"s":2000,"e":3000},{"s":3000,"e":5000},{"s":5000,"e":10000}]]],[]]],[{"k":["651595875897835540","1045109153582022727","1047953830979047455","84764735832068096"],"b":1}],[],null,null,0],[1804122827,"2022-09_guild_onboarding_admin_only_old",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_ONBOARDING_ADMIN_ONLY"]]]]]]]],null,null,0],[2457903107,null,2,[[[[-1,[{"s":0,"e":2000},{"s":8000,"e":10000}]],[1,[{"s":4000,"e":6000}]],[2,[{"s":6000,"e":8000}]]],[[1604612045,[[1183251248,["COMMUNITY_EXP_LARGE_UNGATED"]]]]]],[[[-1,[{"s":0,"e":2000},{"s":8000,"e":10000}]],[1,[{"s":4000,"e":6000}]],[2,[{"s":6000,"e":8000}]]],[[1604612045,[[1183251248,["COMMUNITY_EXP_LARGE_GATED"]]]]]]],[],[],null,null,0],[1443876045,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["959544916848029716","966095003136983121","968232043714588703","959195654813532202","949396043743789116","954473884273496124","1042148168726487101"],"b":1}],[],null,null,0],[24149521,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["979437427456364574","958135532590874704","893264120722370570","1042148168726487101","1042185536984592577","1042521715630166056","488444879836413975","424012709219008522","223070469148901376","359039577362530314","703067018416619522","736744916012630046","930534056200929290","349309639181074433","356833056562348042","378662079361449994","697694775561945109","742765599738036275","936663832070340678","816393875027394642"],"b":1}],[],null,null,0],[3636231100,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["816784679717044276","763838479293349899","435572461912719360","1044378460296061008","876918412369088582","1044721355821678662","1034492236483792958","912834371034181642","809846768074227723","999116324842246224","987012965834297405","942897714956472401","169256939211980800","987122927000494131"],"b":1}],[],null,null,0],[3846449760,"2022-10_stage_channel_effects",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]]]],null,null,0],[848173753,"2022-10_text_in_stage",2,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2294888943,[[2690752156,848173753],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["TEXT_IN_STAGE_ENABLED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["885418158788345897"]]]]]]]],null,null,0],[1669115628,null,1,[[[[2,[{"s":0,"e":10000}]]],[]]],[{"k":["984324782638121000","772904309264089089","290926798626357250","1038135105077657630","1051893027137929307"],"b":1},{"k":["1060282748692078674","1068295875836788736"],"b":2}],[],null,null,0],[2608013421,"2022-11_automod_non_community_guilds_release",0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,null],[1238858341,300]]],[2294888943,[[2690752156,2608013421],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,null],[1238858341,300]]]]],[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,2608013421],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["907770923799674880","1044297931039199233","1044374869414002758","854800679930822667","763838479293349899","1044727347846320179","1044727370445234196","1044727553618882581","992093067530219550","956065520656986172","1044730151281369150"]]]]]]]],null,null,0],[987884927,"2022-11_creator_monetization_onboarding_waitlist",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,987884927],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]]]],null,null,0],[2462216785,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2918402255,[[3399957344,5000],[1238858341,null]]]]],[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540","435572461912719360","1042197875423203391","1042198489783865384","1042199171073060864","1042202474200698990","1044297931039199233","999116324842246224","987012965834297405"],"b":1}],[],null,null,0],[2507971540,"2022-11_default_to_server_vanity_v2",2,[[[[1,[{"s":0,"e":5000},{"s":5000,"e":9000},{"s":9000,"e":10000}]]],[[2294888943,[[2690752156,2507971540],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[416338856,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[3405402067,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["814669604840013874","132251458665054209","942897714956472401","786557653924708373","524552788932558848","432763481289261077","674657048209784872","142082511902605313","244230771232079873","697834746734051358","264363165855252480","489514135608885250","782831067534327828","238080556708003851","808241932919767050","817576132726620200","522477306787397642","256926147827335170","567099257367035926","884458417467559936","453709566409179137","642150179952132107","498851748690264082","393088095840370689","187450744427773963"],"b":1}],[],null,null,0],[1318029053,null,3,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["1034492236483792958","982376986070626344","1022242080233357352","1052692953279246487","763838479293349899","1044721355821678662","1052695012732850206","816784679717044276","1053018122531127448","1054503586761035906","876918412369088582","1054511748557840404","1054512414709788842","1054515966035365960","1054565950759899176","1039940765750665226"],"b":1}],[],null,null,0],[3313601281,null,0,[[[[-1,[{"s":1000,"e":10000}]],[1,[{"s":0,"e":1000}]]],[]]],[{"k":["651595875897835540","1049812122701410314"],"b":1}],[],null,null,0],[4081692393,null,1,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540","889924024367452241","1012394956247269376","936317138904440892","257310633211461633","525734532440260618","353315134678106113","274702265321783297","182121241111560192","929506677512867911","740310317954891846","86312116675448832","891286303574994974","246604458744610816"],"b":1}],[],null,null,0],[1446479414,null,0,[[[[-1,[{"s":5000,"e":10000}]],[1,[{"s":2500,"e":5000}]]],[]]],[{"k":["651595875897835540","1046918739599315124","971683003606654976","1070109297268248639"],"b":1}],[],null,null,0],[1742920859,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[805661295,"2022-12_mention_raid_limit",1,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["816784679717044276","876918412369088582","1039940765750665226"],"b":1}],[],null,null,0],[280866660,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["SHARED_CANVAS_FRIENDS_AND_FAMILY_TEST"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["1078807279979221032","942879381230063656","172056827335409665","993957185493160057","334452829731422209","225077695141117955","678742032415588412","460657173417164800","976581767068786728","426609467535392778","133838756447911936","175987125626339328","537070934553526272","862059423949127741","710677407257854033","132751006349000704","822219052402606132","1021074787025555567","900242963358179368","315263844207558671","862757171887603722","222852163368386560","696480667348893696","409190184744255490","764656846777745429"],"b":1}],[],null,null,0],[968663312,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["997637077099364383","743213213142876203","943265993613008967","809943708283830302","281683040739262465","1083177865400553502","877393448309772319","855181690824425512","814196235741167637","409190184744255490","1096494224343584858","1070131921218174976","308304292006330369"],"b":1}],[],null,null,0],[2306151484,"2023-02_app_directory_for_all_guild",0,[[[[1,[{"s":0,"e":100},{"s":100,"e":200},{"s":200,"e":400},{"s":400,"e":600},{"s":600,"e":1300},{"s":1300,"e":2000},{"s":2000,"e":6000},{"s":6000,"e":10000}]]],[[2294888943,[[2690752156,2306151484],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["772904309264089089","918917884883922954","936464871334244353"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]]]],null,null,0],[3320756132,null,2,[[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[511273769,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["PARTNERED"]]]]]],[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["816784679717044276","876918412369088582","393088095840370689","424012709219008522","1029315212005888060","453709566409179137","224565836277481473","193120847844737025","120330239996854274","187450744427773963","801178173945151490","125440014904590336","140933721929940992","942646368453935204","222078108977594368","451446182515048448","364119753972776960"],"b":1}],[],null,null,0],[3362434932,null,1,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["AUTOMOD_TRIGGER_USER_PROFILE"]]]]]]],[{"k":["651595875897835540","435572461912719360","900109648869355550","814624114345508936","816784679717044276","763838479293349899","982376986070626344","651597514407018516"],"b":1}],[],null,null,0],[2014775304,null,3,[[[[4,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]],[[[-1,[{"s":2000,"e":10000}]],[1,[{"s":0,"e":100},{"s":200,"e":600}]],[4,[{"s":100,"e":200},{"s":600,"e":1000},{"s":1000,"e":1500},{"s":1500,"e":2000}]]],[]]],[{"k":["886812261455368233","315263844207558671","268982240569065472","1007668375159320607","943265993613008967","992539246835535943","1008822885378433105","1001114660524806205","1037856262144135230","642500834516664331","900193715962912819","533420789547139077","928454829079138344","169256939211980800","348185509484298240","132251458665054209","942897714956472401","917594655414181898","775023113645064253","1009606240546066473","81384788765712384","1073747669937299567","401220874742661121"],"b":4}],[],null,null,0],[2001176293,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["876918412369088582","860609921602682910","942897714956472401","771800742977077289","434445105982865408","169256939211980800","613425648685547541","1088225778442960917","662341325353385985","994171988425850901","943680870966001664","1009937213603188777","896730415317016596"],"b":1},{"k":["816784679717044276"],"b":10}],[],null,null,0],[1727857487,null,1,[[[[1,[{"s":100,"e":200},{"s":600,"e":1000},{"s":1500,"e":2000},{"s":3000,"e":4000},{"s":5000,"e":6000},{"s":7000,"e":8000},{"s":9000,"e":10000}]]],[[188952590,[[188952590,false]]],[2918402255,[[3399957344,1],[1238858341,200]]]]]],[{"k":["1103064168459927674","227251386738409483","313840371274874880","1104138316418400286","295820647660257283","1029604342589833286","426434256290578472","838840935404011560","651595875897835540","1074777828672929852","922748688403693578"],"b":1}],[],null,null,0],[2544556038,"2023-02_onboarding_advanced_mode",0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY_CANARY"]]]],[2294888943,[[2690752156,2544556038],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY_CANARY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,2544556038],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["161053416796323840","548440972997033996"]]]]]]]],null,null,0],[3884904940,"2023-02_onboardingdropdowns",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,3884904940],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["874345844743213126","962007075288915998"]]]]]]]],null,null,0],[748249793,"2023-02_onboarding_home_admin",0,[[[[1,[{"s":5000,"e":10000}]]],[[2294888943,[[2690752156,748249793],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["321410260176732160","884458417467559936","384811165949231104","464894153193684993","524552788932558848","148606162810568704","603970300668805120","310162323220201475","522477306787397642","187450744427773963","422460360084291596","808241932919767050","786557653924708373","1075932456198352918","1079876496493121558","1011482947343372319","1080899969243943072","679875946597056683","692412843370348615","1075056311651270736","942897714956472401","1072196207201501266","828370043867496531"]]]]]]]],null,null,0],[1504498621,null,2,[[[[2,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["SUMMARIES_ENABLED_GA"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["SUMMARIES_ENABLED"]]]]]]],[],[],null,null,0],[295820329,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]],[[[1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[1816004721,"2023-02_stage_boosting",2,[[[[1,[{"s":0,"e":500},{"s":500,"e":5000},{"s":5000,"e":9500},{"s":9500,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]],[2294888943,[[2690752156,1816004721],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["885418158788345897"]]]]]]]],null,null,0],[3101260054,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[188952590,[[188952590,false]]],[2918402255,[[3399957344,1],[1238858341,50]]]]]],[],[],null,null,0],[4083096281,null,2,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["CLYDE_EXPERIMENT_ENABLED","INTERNAL_EMPLOYEE_ONLY"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[-1,[{"s":2200,"e":10000}]],[1,[{"s":0,"e":100}]],[3,[{"s":200,"e":1200}]]],[[2918402255,[[3399957344,0],[1238858341,100]]]]],[[[-1,[{"s":2000,"e":10000}]],[3,[{"s":0,"e":1000}]]],[[2918402255,[[3399957344,101],[1238858341,200]]]]]],[{"k":["860609921602682910","869772539071713340","993957185493160057","690040107322966037","954241501922213940","411964563278397440","363154169294618625","819703530423975956","132189483301863424","132751006349000704","133838756447911936","409190184744255490","922748688403693578","772904309264089089","358811058489524225","576105656881512450","612443491770957833","116294130149097479","309711518948392961","209707792314007552","883039603144155197","878697917374939256","771800742977077289"],"b":1},{"k":["1097934938763968565"],"b":3},{"k":["938884225459957902"],"b":4}],[],null,null,0],[747043176,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[3890564237,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["CREATOR_MONETIZABLE_DISABLED"]]]]]],[[[1,[{"s":0,"e":2500},{"s":2500,"e":3000},{"s":3000,"e":10000}]]],[[1604612045,[[1183251248,["ROLE_SUBSCRIPTIONS_ENABLED"]]]]]],[[[-1,[{"s":5000,"e":10000}]],[1,[{"s":0,"e":5000}]]],[[1604612045,[[1183251248,["CREATOR_MONETIZABLE_PROVISIONAL"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540","963913819418161182","1082392097254023199","1090311153802031315","1042148168726487101","816784679717044276","803095016154071093","612443491770957833","706356477765353563","443584877829554177","844508269840957460","756644176610721842","84789673121038336","805831366406438912","106650112222060544","804414667551670335","310723715447128064","585577383847788554","985363294221123594","530119670133555210","964645662866173972","915336728707989534"],"b":1}],[],null,null,0],[1640064366,"2023-02_onboarding_home_admin",0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["1080899969243943072","763838479293349899"],"b":1}],[],null,null,0],[280214844,"2023-03_home_deprecation",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,280214844],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[1489979462,"2023-03_improved_message_markdown_guild",1,[[[[2,[{"s":0,"e":1000},{"s":1000,"e":2000},{"s":2000,"e":3500},{"s":3500,"e":5000},{"s":5000,"e":7500},{"s":7500,"e":9000},{"s":9000,"e":10000}]]],[[2294888943,[[2690752156,1489979462],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["1103353437619503138"]]]]]]],[[[[2,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["804032421678153819"]]]]]]]],null,null,0],[2182959876,"2023-03_mj_chat_bar_guild",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["662267976984297473"]]]]]]]],null,null,0],[3738976194,"2023-03_onboarding_soft_requirement_for_partnership",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,3738976194],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[485475819,"2023-03_onboarding_upsell_lifecycle",4,[[[[-1,[{"s":0,"e":10000}]]],[]],[[[-1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,5000],[1238858341,null]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[2918402255,[[3399957344,5000],[1238858341,null]]]]],[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["1096119963267375124","1096120009211781182"]]]]]]]],null,null,0],[1789705089,null,0,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[-1,[{"s":200,"e":10000}]],[1,[{"s":100,"e":200}]]],[[2918402255,[[3399957344,1],[1238858341,50]]]]]],[],[],null,null,0],[3194028601,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["1042521715630166056"],"b":1}],[],null,null,0],[808859253,null,1,[[[[3,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE"]]]]]],[[[3,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["ROLE_SUBSCRIPTIONS_ENABLED"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["1042148168726487101","1042521715630166056","954473884273496124","893264120722370570","1098703291694710836","963913819418161182","954477686967922778","1063878083322585088","706356477765353563"],"b":1},{"k":["949396043743789116","1053361203738591262","1103781094203072632","494673764601036840","458369608655831050","217055651371679745","752560653939638334","577158348068093982","585190878151311373","986205117357363240","334891772696330241","719579184023863378","212435931766980609","725341600670023700"],"b":3}],[],"2023-06_server_subscriptions_tier_templates_holdout",0,0],[2355118827,null,2,[[[[-1,[{"s":200,"e":10000}]],[1,[{"s":0,"e":100}]]],[]]],[{"k":["651595875897835540","1096485049760759972","1100151397808357498","827664081459740712","993957185493160057","705666251560583168","1095740864757776488","1103771563066658828","1021478553033920544","533420789547139077","996817886695927808"],"b":1}],[],null,null,0],[3964855818,null,1,[[[[-1,[{"s":4000,"e":10000}]],[1,[{"s":2000,"e":4000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["651595875897835540"],"b":1}],[],null,null,0],[4063488887,null,0,[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY_CANARY"]]]]]],[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540"],"b":1},{"k":["1080899969243943072"],"b":42}],[],null,null,0],[3045613474,"2023-04_growing_friend_guild_community_upsell",2,[[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]],[[[1,[{"s":100,"e":200},{"s":1100,"e":2000},{"s":6000,"e":10000}]]],[[2294888943,[[2690752156,3045613474],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["786031121397317633","1044374869414002758","1114255235704180746","1075135858732175371","1105587297132478476","816784679717044276","1105586877878247447","992093067530219550","1105586069497466943"]]]]]]]],null,null,0],[2710924848,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["816784679717044276","874345844743213126","840296607785287763","1113529666989469708","435572461912719360"],"b":1}],[],null,null,0],[3903965280,"2023-04_mobile_remix_v2",0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[41612842,null,0,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["651595875897835540","876918412369088582","1105576287197724786","1105576346555523218","1105576413635039282","1105576433633472532","1105576549056528457","1105576609928445964","1105576653742166106","1039940765750665226","1105952274511057058","1105952651960668323","1105953713673228358","1105953777212739716","816784679717044276","1114255235704180746"],"b":1}],[],null,null,0],[2236798974,null,0,[[[[-1,[{"s":0,"e":10000}]]],[]]],[{"k":["1042148168726487101","1037831818994536579","966095003136983121","1075531421554180096"],"b":1}],[],null,null,0],[4261225962,null,1,[[[[-1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["322850917248663552","662267976984297473","586704051148816385","517660115675906051","926691694680870982","1046979304547954728","710745950380884009","679875946597056683","989166677390426132","974519864045756446"]]]]]],[[[-1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["AUTOMOD_TRIGGER_USER_PROFILE"]]]]]],[[[-1,[{"s":6000,"e":10000}]],[1,[{"s":3000,"e":6000}]]],[[1604612045,[[1183251248,["COMMUNITY"]]]]]]],[{"k":["651595875897835540","1075135858732175371","667617745034280962"],"b":1}],[],null,null,0],[2701598838,"2023-05_clyde_ai_guild_personality",0,[[[[-1,[{"s":5000,"e":10000}]],[1,[{"s":0,"e":2000},{"s":2000,"e":5000}]]],[[2294888943,[[2690752156,2701598838],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[3013771838,[[3013771838,["378270734587396097","856605399154688045","1115761496710975601","869267695911194645","869772539071713340"]]]]]],[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["INTERNAL_EMPLOYEE_ONLY"]]]]]]]],null,null,0],[695300504,"2023-05_optional_onboarding_home_admin",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,695300504],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[[[[[1,[{"s":0,"e":10000}]]],[[1604612045,[[1183251248,["COMMUNITY_CANARY"]]]]]]]],null,null,0],[631733804,null,1,[[[[1,[{"s":0,"e":10000}]]],[]]],[{"k":["1096485049760759972","1096492110254964809","705666251560583168"],"b":1}],[],null,null,0],[4195647747,"2023-06_remove_reactions_by_type",0,[[[[1,[{"s":0,"e":10000}]]],[[2294888943,[[2690752156,4195647747],[1982804121,10000]]]]],[[[-1,[{"s":0,"e":10000}]]],[]]],[],[],null,null,0],[2080490321,"2023-03_server_subscriptions_tier_templates",0,[[[[-1,[{"s":600,"e":10000}]],[1,[{"s":300,"e":600}]]],[[1604612045,[[1183251248,["ROLE_SUBSCRIPTIONS_ENABLED"]]]]]]],[{"k":["1098695569129611454"],"b":0}],[],"2023-06_server_subscriptions_tier_templates_holdout",0,0]];
${data}.friend_suggestion_count = 0;
${data}.experiments = ${data}.experiments || [[4130837190,0,10,-1,0,3019,0],[4181417939,0,1,-1,6,4364,0],[3316720711,0,1,-1,1,8054,0],[156590431,0,1,-1,2,7367,0],[2617218444,4,1,-1,2,6955,0],[2088781100,0,1,-1,0,8628,0],[3035674767,0,1,-1,0,7965,0],[1609782151,0,1,-1,2,3427,0],[3354177721,0,1,-1,0,4791,0],[3643362751,0,1,-1,0,3806,0],[224989674,0,0,-1,0,2329,0],[3753034466,1,2,-1,0,593,0],[3012117409,4,1,-1,0,1723,0],[2854861606,0,1,-1,1,9746,0],[1913882179,0,1,-1,2,8809,0],[1567199723,0,1,-1,1,1237,0],[3091068323,0,9,-1,7,7642,0],[454783470,4,1,-1,0,9735,0],[3968014510,0,1,-1,0,829,0],[3615787841,0,1,-1,0,4022,0],[3908731451,0,1,-1,0,9731,0],[3997593347,2,1,-1,2,9732,0],[3778358021,2,0,-1,0,2587,0],[2486591316,0,1,-1,1,9912,0],[2950595281,2,1,-1,0,4277,0],[4179344527,3,1,-1,1,6057,0],[2542634194,0,1,-1,0,2723,0],[3450899088,1,1,-1,0,3773,0],[3656796460,3,3,-1,3,9698,0],[1685515200,0,18,-1,0,7514,0],[2519288568,0,1,-1,4,9214,0],[1814483290,0,1,-1,0,6032,0],[4221006726,0,1,-1,0,508,0],[4156073260,3,2,-1,0,4875,0],[3482807542,13,1,-1,1,759,0],[1398673921,1,1,-1,0,9589,0],[1312831343,0,2,-1,0,6374,0],[3557480712,0,1,-1,0,6005,0],[1214828025,0,1,-1,0,5811,0],[853403133,4,1,-1,0,2550,0],[2491005019,4,1,-1,0,2792,0],[3889077804,2,1,-1,0,292,0],[4079214319,2,1,-1,0,5300,0],[381231361,0,1,-1,3,3526,0],[4285126928,2,1,-1,4,7607,0],[275647339,0,1,-1,2,8522,0],[1687110464,1,1,-1,0,8516,0],[1532280548,16,1,-1,3,4120,0],[542042630,14,1,-1,3,4120,0],[1095779154,0,1,-1,2,7846,0],[976159363,0,1,-1,0,8785,0],[853790804,0,0,-1,0,1816,0],[1398007839,0,1,-1,2,2927,0],[1034661306,0,1,-1,0,9865,0],[2651041681,4,4,-1,1,2116,0],[1944696695,0,1,-1,0,870,0],[828251710,2,1,-1,1,9884,0],[1851544364,0,1,-1,0,7401,0],[3124003316,1,1,-1,0,1045,0],[4136574802,0,1,-1,1,9647,0],[4049571159,0,1,-1,0,3394,0],[3182051840,0,1,-1,0,8780,0],[2514746297,0,1,-1,0,8301,0],[909075235,0,1,-1,0,4029,0],[2898887059,2,3,-1,0,4872,0],[231858385,0,1,-1,1,4489,0],[1443856828,3,9,-1,1,8170,0],[2539540256,0,1,-1,3,5,0],[667096268,2,0,-1,0,2184,0],[346890398,6,3,-1,1,2142,0],[3991298449,2,1,-1,2,276,0],[472975400,6,1,-1,0,7968,0],[1794874227,2,1,-1,0,5645,0],[102690720,0,2,-1,6,8420,0],[1503364285,0,1,-1,1,1279,0],[1549543958,2,1,-1,0,4452,0],[2310336488,0,1,-1,0,9547,0],[3096722613,0,1,-1,1,4662,0],[3376236088,0,1,-1,0,2563,0],[2101363121,2,1,-1,0,3788,0],[71699970,4,1,-1,1,1296,0],[2312508336,7,2,-1,2,5857,0],[2206139940,0,1,-1,0,5208,0],[1323079101,3,1,-1,0,3834,0],[1075601202,2,2,-1,0,1019,0],[1333727,0,1,-1,0,6590,0],[1631741096,0,1,-1,0,8039,0],[2346754435,1,1,-1,0,4942,0],[535388300,3,1,-1,0,5829,0],[4026313904,1,1,-1,0,4820,0],[297267094,0,0,-1,0,1004,0],[2732395257,2,1,-1,1,467,0],[3772658100,0,1,-1,0,8770,0],[655899426,0,10,-1,1,7114,0],[4169494713,0,1,-1,0,6512,0],[1133868976,0,1,-1,4,6735,0],[2067676101,4,2,-1,1,2185,0],[184775741,0,1,-1,1,4279,0],[1834860859,0,1,-1,0,6365,0],[2229810993,0,1,-1,0,2356,0],[3029387945,1,1,-1,0,3260,0],[785391472,0,1,-1,0,9364,0],[987713133,5,1,-1,0,3647,0],[1788933951,2,1,-1,0,1676,0],[183688925,0,1,-1,0,767,0],[1289034223,3,2,-1,1,1036,0],[1353647162,0,1,-1,0,2367,0],[1199473815,1,1,-1,0,9333,0],[3681402878,0,1,-1,0,792,0],[2963768332,0,1,-1,0,716,0],[3346916614,0,1,-1,0,2077,0],[454680912,3,1,-1,4,6707,0],[738080167,0,1,-1,1,5104,0],[3482834131,0,1,-1,0,451,0],[1389690772,1,1,-1,2,7451,0],[1212874525,0,1,-1,2,7422,0],[887694445,1,1,-1,0,3086,0],[1859132618,0,2,-1,0,7606,0],[445093658,0,1,-1,0,268,0],[3283745071,0,1,-1,0,2716,0],[268309827,0,1,-1,7,2826,0],[671665651,0,1,-1,1,1071,0],[373531156,0,3,-1,0,3365,0],[2429216059,0,1,-1,0,2307,0],[4018042686,0,1,-1,0,9603,0],[6046655,0,1,-1,0,8141,0],[2937329910,1,1,-1,2,583,0],[3699020455,0,1,-1,0,9317,0],[3742269191,0,1,-1,0,7618,0],[2616904300,0,1,-1,0,5602,0],[3839121633,1,1,-1,0,5091,0],[64742860,2,1,-1,2,4120,0],[104142913,1,1,-1,0,5725,0],[288968706,0,1,-1,3,4993,0],[995752019,0,1,-1,2,4289,0],[1045730203,1,1,-1,0,6219,0],[3522378716,0,1,-1,0,8394,0],[2091202574,0,1,-1,0,6307,0],[4265918989,0,1,-1,0,3624,0],[325693975,1,1,-1,0,5963,0],[1015303386,0,1,-1,0,6853,0],[3190368920,0,1,-1,0,9519,0],[3212616249,0,1,-1,0,4702,0],[2259980868,1,1,-1,0,3938,0],[3060384904,0,1,-1,0,9142,0],[1906632964,0,1,-1,0,4969,0],[1171817240,3,6,-1,0,9829,0],[1042922468,0,0,-1,0,1013,0],[2556223249,0,1,-1,0,7845,0],[853908483,0,1,-1,0,8443,0],[933369006,0,1,-1,0,4954,0],[3351255926,0,1,-1,0,611,0],[3470212856,3,3,-1,0,3764,0],[3364594544,0,1,-1,1,3733,0],[713760307,2,4,-1,1,9123,0],[2205929113,1,1,-1,0,3454,0],[1083932689,0,1,-1,0,6827,0],[2016786830,0,0,-1,0,4080,0],[1682576930,0,1,-1,0,9062,0]];
${data}.connected_accounts = [];
${data}.auth_session_id_hash = null;
${data}.analytics_token = null;
${data}.auth = {
	authenticator_types: [2, 3],
}
${data}.consents = {
	personalization: {
		consented: true,
	},
};
}
`
                        );
                    },
                },
                // _doIdentify
                {
                    match: /(this\.token=)(\w+)(,)(\w+)(\.verbose\("\[IDENTIFY\]"\);)/,
                    replace: function (str, ...args) {
                        let varToken = args[1];
                        return (
                            str +
                            `
${varToken} = ${varToken}.replace(/bot/gi,"").trim();
const botInfo = await electron.getBotInfo(${varToken});
this.token = ${varToken};
console.log(botInfo);
if (!botInfo.success) {
	showToast(botInfo.message, 2);
	return this._handleClose(!0, 4004, botInfo.message);
}
const intentsData = electron.requestIntents(botInfo.data.flags);
const intents = getIntents(...intentsData.skip);
allShards = Math.ceil(parseInt(botInfo.data.approximate_guild_count) / 100) || 1;
if (currentShard + 1 >= allShards) {
    currentShard = 0;
}
showToast('Bot Intents: ' + intents, 1);
showToast(\`Shard ID: \${currentShard} (All: \${allShards})\`, 1);
                        `
                        );
                    },
                },
                // Sharding
                {
                    match: /(token:\w+)(,capabilities:)/,
                    replace: function (str, ...args) {
                        return `${args[0]},intents,shard: [parseInt(currentShard), allShards]${args[1]}`;
                    },
                },
            ],
        },
        {
            // Bot account caused the error
            find: "users_size:JSON.stringify",
            replacement: [
                {
                    match: /users_size:JSON.stringify\(\w+\)\.length/,
                    replace: "users_size:0",
                },
                {
                    match: /read_states_size:JSON.stringify\(\w+\)\.length/,
                    replace: "read_states_size:0",
                },
            ],
        },
        {
            // Bot account caused the error
            find: "notificationSettings:{",
            replacement: [
                {
                    match: /(notificationSettings:{flags:)([\w\.]+)},/,
                    replace: function (str, ...args) {
                        return args[0] + "0},";
                    },
                },
            ],
        },
        {
            // Patch getToken & setToken function
            find: "this.encryptAndStoreTokens()",
            replacement: [
                {
                    match: /(getToken\()(\w)(\){)(.+)(},setToken)/,
                    replace: function (str, ...args) {
                        let varToken = args[1];
                        let arrayToken = args[3].match(/\w+\[\w+\]:\w+/)?.[0];
                        let body = `
this.init();
let t = ${varToken} ? ${arrayToken}
return t ? \`Bot \${t.replace(/bot/gi,"").trim()}\` : null`;
                        return `${args[0]}${args[1]}${args[2]}${body}${args[4]}`;
                    },
                },
                {
                    match: /,setToken\((\w+),(\w+)\){/,
                    replace: function (str, ...args) {
                        const token = args[0];
                        const id = args[1];
                        return str + `if(${token}){${token}=${token}.replace(/bot/gi,"").trim()}`;
                    },
                },
            ],
        },
        {
            find: "STARTED_ONBOARDING=8",
            replacement: [
                {
                    match: /STARTED_ONBOARDING=8/,
                    replace: 'STARTED_ONBOARDING=4294967296',
                }
            ]
        },
        {
            // Don't delete localStorage
            find: "delete window.localStorage",
            replacement: [
                {
                    match: "delete window.localStorage",
                    replace: "",
                },
            ],
        },
        // Patch some unusable bot modules/methods
        {
            find: "resolveInvite:",
            replacement: [
                {
                    match: /,acceptInvite\(\w+\){/,
                    replace: `$& showToast('Discord Bot Client cannot join guilds',2);
                    return Promise.reject("Discord Bot Client cannot join guilds");`,
                },
            ],
        },
        {
            find: "loadTemplatesForGuild:",
            replacement: [
                {
                    match: /loadTemplatesForGuild:/,
                    replace:
                        '$& () => Promise.reject("Discord Bot Client cannot use Guild Templates"), loadTemplatesForGuild_:',
                },
            ],
        },
    ],
    commands: [
        {
            name: "ping",
            description: "Ping pong!",
            inputType: ApplicationCommandInputType.BOT,
            execute: (opts, ctx) => {
                sendBotMessage(ctx.channel.id, { content: "Pong!" });
            },
        },
        {
            name: "purge",
            description: "Delete messages from the channel",
            inputType: ApplicationCommandInputType.BOT,
            options: [
                {
                    name: "amount",
                    description: "Input the amount of messages to delete",
                    required: true,
                    type: ApplicationCommandOptionType.INTEGER,
                },
            ],
            execute: async (opts, ctx) => {
                const amount = findOption<number>(opts, "amount", 2);
                if (amount < 2 || amount > 100) {
                    sendBotMessage(ctx.channel.id, {
                        content: `Invalid messages (2<=${amount}<=100)`,
                    });
                } else {
                    const oldId = SnowflakeUtil.generate(
                        Date.now() - 1209600000
                    );
                    const { body } = await RestAPI.get({
                        url: `/channels/${ctx.channel.id}/messages?limit=${amount}`,
                    });
                    const messages = body
                        .filter((m) => BigInt(m.id) > BigInt(oldId))
                        .map((m) => m.id);
                    try {
                        await RestAPI.post({
                            url: `/channels/${ctx.channel.id}/messages/bulk-delete`,
                            body: {
                                messages,
                            },
                        });
                        sendBotMessage(ctx.channel.id, {
                            content: `Deleted ${messages.length} messages`,
                        });
                    } catch {
                        sendBotMessage(ctx.channel.id, {
                            content: "Failed to delete messages",
                        });
                    }
                }
            },
        },
        {
            name: "switchshard",
            description: "Login with another shard ID",
            inputType: ApplicationCommandInputType.BOT,
            options: [
                {
                    name: "id",
                    description: "Shard ID",
                    required: true,
                    type: ApplicationCommandOptionType.INTEGER,
                },
            ],
            execute: async (opts, ctx) => {
                const id = findOption<number>(opts, "id", 0);
                if (id < 0 || id + 1 >= window.allShards) {
                    sendBotMessage(ctx.channel.id, {
                        content: `Invalid shardId (0<=${id}<=${window.allShards - 1
                            })`,
                    });
                } else {
                    window.currentShard = id;
                    LoginToken.loginToken(GetToken.getToken());
                }
            },
        },
        {
            name: "switchtoken",
            description: "Login with another bot",
            inputType: ApplicationCommandInputType.BOT,
            options: [
                {
                    name: "token",
                    description: "Bot token",
                    required: true,
                    type: ApplicationCommandOptionType.STRING,
                },
            ],
            execute: async (opts, ctx) => {
                const token = findOption<string>(opts, "token", "");
                if (
                    !/(mfa\.[a-z0-9_-]{20,})|([a-z0-9_-]{23,28}\.[a-z0-9_-]{6,7}\.[a-z0-9_-]{27})/i.test(
                        token
                    )
                ) {
                    sendBotMessage(ctx.channel.id, {
                        content: `Invalid token`,
                    });
                } else {
                    window.currentShard = 0;
                    LoginToken.loginToken(token);
                }
            },
        },
        {
            name: 'embed',
            description: 'Creates an embed with the specified color in the specified channel',
            inputType: ApplicationCommandInputType.BOT,
            options: [
                {
                    type: ApplicationCommandOptionType.STRING,
                    name: 'text',
                    description:
                        'Input text (separate the title from the description with |)',
                    required: true,
                },
                {
                    type: ApplicationCommandOptionType.STRING,
                    name: 'color',
                    description: 'Input color in hex format. Example: #fedbca',
                    required: false,
                },
            ],
            execute: async (opts, ctx) => {
                let color = findOption<string>(opts, "color", "#000000");
                const text = findOption<string>(opts, "text", "");
                if (color.startsWith('#')) {
                    color = color.slice(1);
                }
                if (color.length > 6 || Number.isNaN(parseInt(color, 16))) {
                    return sendBotMessage(ctx.channel.id, {
                        content: `"#${color}" is not a valid color. Please enter a color in the \`#ffffff\` format. (hex)`,
                    });
                }
                let inputColor = parseInt(color, 16);
                // Resolve the text to title and description
                let [title, description] = text.split('|');
                getAPIBaseURL.post({
                    url: `/channels/${ctx.channel.id}/messages`,
                    body: {
                        embeds: [
                            {
                                title,
                                description:
                                    description && description.trim().length > 0
                                        ? description
                                        : undefined,
                                color: inputColor,
                            },
                        ],
                    },
                }).then(() => {
                    return sendBotMessage(ctx.channel.id, {
                        content: 'Embed sent!',
                    });
                }).catch((e) => {
                    return sendBotMessage(ctx.channel.id, {
                        content: 'Error sending embed.\n' + e.message,
                    });
                });
            },
        }
    ],
    start() {
        // Patch modules
        [
            "acceptFriendRequest",
            "addRelationship",
            "cancelFriendRequest",
            "clearPendingRelationships",
            "confirmClearPendingRelationships",
            "fetchRelationships",
            "removeFriend",
            "removeRelationship",
            "sendRequest",
            "unblockUser",
            "updateRelationship",
        ].forEach(
            (a) =>
            (findByProps("fetchRelationships")[a] = function () {
                window.showToast(
                    "Discord Bot Client cannot use Relationships Module",
                    2
                );
                return Promise.reject(
                    "Discord Bot Client cannot use Relationships Module"
                );
            })
        );

        const doRefreshMemberList = () => {
            if (this.settings.store.memberListInterval < 1) {
                this.settings.store.memberListInterval = 1;
            }
            BotClientLogger.info('Update MemberList: Interval', this.settings.store.memberListInterval * 1000);
            setTimeout(() => {
                doRefreshMemberList();
            }, this.settings.store.memberListInterval * 1000);
            if (!this.settings.store.showMemberList) return;
            const channel = getCurrentChannel();
            if (
                !channel ||
                !channel.guild_id ||
                channel.isDM() ||
                channel.isGroupDM() ||
                channel.isMultiUserDM() ||
                channel.isGuildVoice() ||
                channel.isGuildStageVoice() ||
                channel.isDirectory()
            ) {
                BotClientLogger.error('Update MemberList: Invalid Channel', channel);
                return false;
            }
            const guild = getCurrentGuild();
            if (!guild) return;
            // MemberListId
            const allow: string[] = [];
            const deny: string[] = [];
            const arrayMemberListId: string[] = [];
            const allId = Object.keys(channel.permissionOverwrites);
            for (const id of allId) {
                if (
                    window.checkBitfield(channel.permissionOverwrites[id].allow)
                ) {
                    allow.push(id);
                }
                if (
                    window.checkBitfield(channel.permissionOverwrites[id].deny)
                ) {
                    deny.push(id);
                }
            }
            allow.sort();
            deny.sort();
            // @ts-ignore
            const everyonePerms = new PermissionsDiscord(
                guild.roles[guild.id].permissions
            );
            if (deny.length) {
                arrayMemberListId.push(
                    ...allow.map((i) => `allow:${i}`),
                    ...deny.map((i) => `deny:${i}`)
                );
            } else if (!everyonePerms.has("VIEW_CHANNEL")) {
                arrayMemberListId.push(
                    ...allow.map((i) => `allow:${i}`),
                    ...deny.map((i) => `deny:${i}`)
                );
            }
            const memberListId =
                arrayMemberListId.length == 0
                    ? "everyone"
                    : murmurhash.v3(arrayMemberListId.join(","));
            // Sort role
            const roleSort = Object.values(guild.roles)
                .filter((r) => r.hoist)
                .sort((x, y) => y.position - x.position);
            // GuildMembers Patch
            const allMembers = Object.values(GuildMemberStore.getMembers(guild.id));
            let member_count = allMembers.length;
            const convertMembersToRaw = allMembers
                .filter(
                    (m) =>
                        PermissionUtil.computePermissions({
                            user: { id: m.userId },
                            context: guild,
                            overwrites: channel.permissionOverwrites,
                            member: m,
                        }) & PermissionsBits.VIEW_CHANNEL
                )
                .map((data) => {
                    const m: any = {
                        user: {
                            id: data.userId,
                        },
                        roles: data.roles,
                        premium_since: data.premiumSince,
                        pending: data.isPending,
                        nick: data.nick,
                        joined_at: data.joinedAt,
                        flags: (data as any).flags,
                        communication_disabled_until:
                            data.communicationDisabledUntil,
                        avatar: data.avatar,
                        status: PresenceStore.getStatus(data.userId) || 'offline',
                    };
                    const role = roleSort.find(r => m.roles.includes(r.id));
                    m.hoistRoleId = role?.id
                    if (!role) m.position = 0;
                    else m.position = role.position;
                    return m;
                });
            const membersOnline = convertMembersToRaw.filter(m => m.status !== 'offline').sort((x, y) => y.position - x.position);
            const membersOffline = convertMembersToRaw.length > 1000 ? [] : convertMembersToRaw.filter(m => m.status == 'offline').sort((x, y) => y.position - x.position);
            // Group
            function getGroup(arr, off) {
                let all: any[] = []
                let all2: any[] = []
                const list_ = {}
                for (const member of arr) {
                    list_[member.hoistRoleId || 'online'] = {
                        group: {
                            id: member.hoistRoleId || 'online',
                            count: (list_[member.hoistRoleId || 'online']?.group?.count || 0) + 1
                        },
                        members: [member, ...(list_[member.hoistRoleId || 'online']?.members || [])]
                    }
                }
                for (const key in list_) {
                    list_[key].members.sort((x, y) =>
                        (x.nick || x.user.username || '').localeCompare(
                            y.nick || y.user.username || '',
                        ),
                    );
                    all.push({
                        group: list_[key].group
                    });
                    all2.push(list_[key].group);
                    all = [...all, ...(list_[key].members.map(m => {
                        return {
                            member: m
                        }
                    }))]
                }
                if (off.length > 0) {
                    let d = {
                        id: "offline",
                        count: off.length
                    }
                    all.push({
                        group: d
                    });
                    all2.push(d);
                    all = [...all, ...(off.map(m => {
                        return {
                            member: m
                        }
                    }))]
                }
                return {
                    ops: all,
                    group: all2,
                }
            }
            let groups = getGroup(membersOnline, membersOffline);
            // WS
            groups.ops.sort((a, b) => (guild.roles[b.id]?.position || 0) - (guild.roles[a.id]?.position || 0))
            groups.group.sort((a, b) => (guild.roles[b.id]?.position || 0) - (guild.roles[a.id]?.position || 0))
            let ops = [{
                items: groups.ops,
                op: "SYNC",
                range: [0, 99]
            }];
            FluxDispatcher.dispatch({
                guildId: guild.id,
                id: memberListId,
                ops,
                groups: groups.group,
                onlineCount: membersOnline.length,
                memberCount: member_count,
                type: 'GUILD_MEMBER_LIST_UPDATE',
            });
        }

        if (this.settings.store.memberListInterval) {
            setTimeout(() => {
                doRefreshMemberList();
            }, this.settings.store.memberListInterval * 1000);
        }
    },
});
